<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\webform\Entity\Webform;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\user\Entity\User;

/**
 * Implements hook_webform_element_configuration_form_alter().
 */
function vactory_decoupled_webform_webform_element_configuration_form_alter(array &$form, FormStateInterface $form_state) {
  $element_properties = $form_state->get('element_properties');
  $webform_file_types = ['webform_document_file', 'webform_image_file'];
  if (in_array($element_properties['type'], $webform_file_types)) {
    $element_properties['default_file'] = $element_properties['default_file'] ?? '';
    $form['file']['default_file'] = [
      '#type'          => 'textfield',
      '#title'         => t('Default file'),
      '#default_value' => $element_properties['default_file'],
      '#description'   => t('Default file ID, tokens are supported'),
    ];
  }
  if ($element_properties['type'] === 'webform_wizard_page') {
    $element_properties['icon'] = $element_properties['icon'] ?? '';
    $form['form']['icon'] = [
      '#type'          => 'vactory_icon_picker',
      '#title'         => 'Step icon',
      '#default_value' => $element_properties['icon'],
    ];
  }
  $form_state->set('element_properties', $element_properties);
}

/**
 * Implements hook_webform_element_configuration_form_alter().
 */
function vactory_decoupled_webform_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['#webform_id'])) {
    $webform = Webform::load($form['#webform_id']);
    $elements = $webform->getElementsInitializedAndFlattened();
    $resultKey = NULL;
    foreach ($elements as $key => $element) {
      if ($element['#type'] == 'captcha' && isset($element['#captcha_type']) && $element['#captcha_type'] == 'captcha/Math') {
        $form['#validate'][] = 'validate_captcha_math';
        break;
      }
    }
  }
}

/**
 * A custom validation for captcha math.
 */
function validate_captcha_math(&$form, FormStateInterface $form_state) {
  $errors = $form_state->getErrors();

  if (array_key_exists('captcha_response', $errors)) {
    unset($errors['captcha_response']);
  }
  $form_state->clearErrors();

  foreach ($errors as $key => $value) {
    $form_state->setErrorByName($key, $value);
  }
  $user_input = $form_state->getFormObject()->getEntity()->getData();

  $expected_captcha = \Drupal::database()
    ->select('captcha_sessions', 'cs')
    ->fields('cs', ['solution'])
    ->condition('csid', $user_input['captcha_sid'])
    ->execute()
    ->fetchField();

  if (!isset($expected_captcha) || $expected_captcha != $user_input['captcha_response']) {
    $form_state->setErrorByName('captcha_response', t("Le champs Captcha n'est pas valide."));
  }
}

/**
 * Implements hook_webform_access().
 */
function vactory_decoupled_webform_webform_access($webform, $operation, AccountInterface $account) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if (strpos($route_name, 'jsonapi.') !== FALSE && $operation == 'test' && $account->isAuthenticated()) {
    $user = User::load($account->id());
    if (in_array('administrator', $user->getRoles())) {
      return AccessResult::allowed();
    }
    $access_rules = $webform->getAccessRules()['test']['roles'];
    if (count(array_intersect($user->getRoles(), $access_rules)) > 0) {
      return AccessResult::allowed();
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function vactory_decoupled_webform_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'webform_submission') {
    $fields['datalayer'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Datalayer'))
      ->setDescription(t('Stores datalayers.'))
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE);
  }
  return $fields;
}

/**
 * Implements hook_decoupled_df_format_alter().
 */
function vactory_decoupled_webform_decoupled_df_format_alter(&$value, &$info, &$cacheability) {
  if ($info['type'] === 'webform_decoupled' && !empty($value)) {
    $webform_id = $value['id'];
    // Cache tags.
    $cacheTags = Cache::mergeTags($cacheability->getCacheTags(), [
      'webform_submission_list',
      'config:webform_list',
    ]);
    $cacheability->setCacheTags($cacheTags);
    // Cache contexts.
    $cacheContexts = Cache::mergeContexts($cacheability->getCacheContexts(), ['user']);
    $cacheability->setCacheContexts($cacheContexts);
    // Service invoked statically because vactory_decoupled_webform.
    // Module depends on vactory_decoupled.
    $value['elements'] = \Drupal::service('vactory.webform.normalizer')->normalize($webform_id);

    $value['autosave'] = FALSE;
    // Check webform autosave module is enabled and add its settings.
    if (\Drupal::moduleHandler()->moduleExists('vactory_decoupled_webform_autosave')) {
      $webform = Webform::load($webform_id);
      if ($webform) {
        $autosave_settings = $webform->getThirdPartySetting('vactory_decoupled_webform_autosave', 'autosave_settings', []);
        if ($autosave_settings['autosave_enabled']) {
          $value['autosave'] = $autosave_settings;
        }
      }
    }
  }
}
