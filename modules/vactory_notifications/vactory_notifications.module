<?php

/**
 * @file
 * Vactory notifications custom module logic here.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\node\NodeTypeInterface;
use Drupal\user\Entity\Role;
use Drupal\vactory_notifications\Entity\NotificationsEntity;
use Drupal\views\ViewExecutable;
use Drupal\user\Entity\User;
use Symfony\Component\Console\Output\ConsoleOutput;

/**
 * Implements hook_theme().
 */
function vactory_notifications_theme($existing, $type, $theme, $path) {
  return [
    'views_view_fields__notifications' => [
      'template' => 'notification-card',
      'base hook' => 'views_view_fields',
    ],
    'vactory_notifications_link' => [
      'template' => 'notifications-link',
      'variables' => [
        'url' => NULL,
        'nb_new_notifications' => NULL,
      ],
    ],
    'vactory_notifications_toasts' => [
      'template' => 'notifications-toast',
      'variables' => [
        'notifications' => NULL,
      ],
    ],
    'vactory_notifications_toasts_block' => [
      'template' => 'notifications-toasts-block',
      'variables' => [
        'content' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function vactory_notifications_node_presave(EntityInterface $entity) {
  $notification_manager = \Drupal::service('vactory_notifications.manager');
  if ($entity->get('generate_notification')->value && $notification_manager->isNotificationsEnabledForBundle($entity->bundle())) {
    if ($entity->isNew()) {
      drupal_register_shutdown_function('vactory_notification_generate', $entity);
    }
    else {
      vactory_notification_generate($entity);
    }
  }
}

/**
 * Generate notification for given entity.
 */
function vactory_notification_generate($entity) {
  $notification_manager = \Drupal::service('vactory_notifications.manager');
  $notification_config = Drupal::config('vactory_notifications.settings');
  $token = Drupal::token();
  $default_langcode = Drupal::languageManager()->getDefaultLanguage()->getId();
  $source_translated_node = Drupal::service('entity.repository')
    ->getTranslationFromContext($entity, $default_langcode);
  $node_notification_title = !empty($source_translated_node->get('notification_title')->value) ? $source_translated_node->get('notification_title')->value : $notification_config->get('notifications_default_title');
  $node_notification_message = !empty($source_translated_node->get('notification_message')->value) ? $source_translated_node->get('notification_message')->value : $notification_config->get('notifications_default_message');
  $notification_users_ids = $notification_manager->getNotificationsUsersIds($entity->bundle());
  // Generate a notification.
  $user_id = $entity->getOwnerId();
  $notification_data = [
    'type' => 'notification_entity',
    'name' => $token->replace($node_notification_title, ['entity' => $entity]),
    'user_id' => $user_id,
    'notification_related_content' => $entity->id(),
    'notification_message' => $token->replace($node_notification_message, ['entity' => $entity]),
    'status' => TRUE,
    'notification_concerned_users' => Json::encode($notification_users_ids),
    'notification_viewers' => Json::encode([]),
  ];
  $notification = Drupal::entityTypeManager()
    ->getStorage('notifications_entity')
    ->create($notification_data);
  $notification->save();
  if ($notification_config->get('enable_toast')) {
    // Trigger notification toast.
    $notification_manager->triggerNotificationsToast($notification);
  }
  // Notifications auto translation feature.
  $is_auto_translated = (boolean) $notification_config->get('auto_translation');
  if ($is_auto_translated) {
    $notification_manager->notificationsAutoTranslate($notification);
  }
  $mail_content_types = $notification_config->get('mail_content_types');
  // Notification by Mail.
  if ($entity instanceof NodeInterface) {
    $node_type = $entity->getType();
    // Get the mail_content_types data.
    if (isset($mail_content_types[$node_type])) {
      // Check if mail_subject and mail_message are empty.
      // And set default values.
      if (empty($mail_content_types[$node_type]['mail_subject'])) {
        $node_mail_subject = $notification_config->get('mail_default_subject') ?? $notification_config->get('mail_default_subject');
      }
      else {
        // Use the mail_subject from mail_content_types.
        $node_mail_subject = $mail_content_types[$node_type]['mail_subject'];
      }
      if (empty($mail_content_types[$node_type]['mail_message']['value'])) {
        $node_mail_message = $notification_config->get('mail_default_message') ?? $notification_config->get('mail_default_message');
      }
      else {
        // Use the mail_message from mail_content_types.
        $node_mail_message = $mail_content_types[$node_type]['mail_message']['value'];
      }
    }
    else {
      $node_mail_subject = $notification_config->get('mail_default_subject');
      $node_mail_message = $notification_config->get('mail_default_message');
    }
    $node_mail_subject = !empty($entity->get('mail_subject')->value) ? $entity->get('mail_subject')->value : $node_mail_subject;
    $node_mail_message = !empty($entity->get('mail_message')->value) ? $entity->get('mail_message')->value : $node_mail_message;
  }
  // Send a mail notification.
  $is_mail_active = $notification_config->get('mail_active');
  $send_on_publish = $mail_content_types[$entity->getType()]['mail_send_on_publish'] && $entity->status->value;
  $send_on_unpublish = $mail_content_types[$entity->getType()]['mail_send_on_unpublish'] && !$entity->status->value;
  if ($is_mail_active === 1 && ($send_on_publish || $send_on_unpublish) && can_send_notifications_based_user_roles($entity->getType())) {
    if (isset($node_mail_subject) && isset($node_mail_message)) {
      $subject = $token->replace($node_mail_subject, ['entity' => $entity]);
      $message = $token->replace($node_mail_message, ['entity' => $entity]);

      $use_broadcast_list = $entity->get('use_broadcast_list')->value;
      if ($use_broadcast_list) {
        // Get emails from broadcast_list_emails field.
        $broadcast_list_emails = $entity->get('broadcast_list_emails')
          ->getValue();
        $broadcast_list_emails = array_column($broadcast_list_emails, 'value');
        // Send to broadcast list emails.
        foreach ($broadcast_list_emails as $email) {
          $notification_manager->sendNotificationByMail($subject, $email, new FormattableMarkup($message, []));
        }
      }
      else {
        $existing_roles = Role::loadMultiple();
        $target_roles = [];
        foreach ($existing_roles as $key => $role) {
          $mail_roles = $notification_config->get($key . '_content_types_mail');
          if (isset($mail_roles) && !empty($mail_roles) && in_array($entity->bundle(), $mail_roles)) {
            array_push($target_roles, $key);
          }
        }
        if (!empty($target_roles)) {
          $users = User::loadMultiple();
          foreach ($users as $user) {
            if (count(array_intersect($user->getRoles(), $target_roles)) > 0 && !empty($user->getEmail())) {
              $notification_manager->sendNotificationByMail($subject, $user->getEmail(), new FormattableMarkup($message, []));
            }
          }
        }
      }
      // Generate a mail notification.
      $mail_notification_data = [
        'type' => 'notification_entity',
        'mail_subject' => $subject,
        'user_id' => $user_id,
        'notification_related_content' => $entity->id(),
        'mail_message' => $message,
        'status' => TRUE,
        'notification_concerned_users' => Json::encode($notification_users_ids),
        'notification_viewers' => Json::encode([]),
      ];

      $mail_notification = Drupal::entityTypeManager()
        ->getStorage('notifications_entity')
        ->create($mail_notification_data);
      $notification->save();
      // Notifications auto translation feature.
      $is_auto_translated = (boolean) $notification_config->get('auto_translation');
      if ($is_auto_translated) {
        $notification_manager->notificationsAutoTranslate($mail_notification);
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function vactory_notifications_notifications_entity_insert(EntityInterface $entity) {
  $notification_manager = \Drupal::service('vactory_notifications.manager');
  $token = Drupal::token();
  $notification_config = Drupal::config('vactory_notifications.settings');
  $current_route_name = Drupal::routeMatch()->getRouteName();
  // Manually created notifications case.
  if ($current_route_name === 'entity.notifications_entity.add_page') {
    $related_content_id = $entity->getRelatedContent();
    $related_content = Node::load($related_content_id);
    $concerned_users = $notification_manager->getNotificationsUsersIds($related_content->bundle());
    $entity->setTitle($token->replace($entity->getTitle(), ['entity' => $entity]));
    $entity->setMessage($token->replace($entity->getMessage(), ['entity' => $entity]));
    $entity->setConcernedUsers($concerned_users);
    $entity->setViewers([]);
    $entity->save();
    // Notifications auto translation feature.
    $is_auto_translated = (boolean) $notification_config->get('auto_translation');
    if ($is_auto_translated) {
      $notification_manager->notificationsAutoTranslate($entity);
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function vactory_notifications_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'node') {
    // The notification entity title.
    $fields['notification_title'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Notifications title'))
      ->setDescription(t('Set the noifications title of current node.'))
      ->setSettings([
        'max_length' => 255,
        'text_processing' => 0,
      ])
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => -6,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('field', TRUE);

    // Notification details/message.
    $fields['notification_message'] = BaseFieldDefinition::create('string_long')
      ->setLabel(t('Notifications message'))
      ->setDescription(t('Set the notification message of current node'))
      ->setSettings([
        'default_value' => '',
        'text_processing' => 0,
      ])
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textarea',
        'weight' => -1,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);

    // The Mail notification entity subject.
    $fields['mail_subject'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Mail Notifications subject'))
      ->setDescription(t('Set the noifications subject of current node.'))
      ->setSettings([
        'max_length' => 255,
        'text_processing' => 0,
      ])
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => -6,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('field', TRUE);

    // Mail details/message.
    $fields['mail_message'] = BaseFieldDefinition::create('text_long')
      ->setLabel(t('Mail Notifications message'))
      ->setDescription(t('Set the mail message of current node.'))
      ->setSettings([
        'default_value' => '',
        'text_processing' => 0,
      ])
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'text_textarea',
        'weight' => -1,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);

    // Generate notification.
    $fields['generate_notification'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Generate notification'))
      ->setDescription(t('Check this to generate a notification for this content'))
      ->setDefaultValue(1)
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ],
      ])
      ->setDisplayConfigurable('form', TRUE);
  }
  return $fields;
}

/**
 * Implements hook_form_alter().
 */
function vactory_notifications_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $user_forms = [
    'user_form',
    'user_register_form',
  ];
  if (in_array($form_id, $user_forms)) {
    $form['field_notification_toast']['#access'] = FALSE;
    $form['field_notifications_viewed_toast']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vactory_notifications_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $notifications_config = Drupal::config('vactory_notifications.settings');
  $form['node_notifications'] = [
    '#type' => 'details',
    '#title' => t('Notifications settings'),
    '#description' => t('Override current node notifications title and message.'),
    '#group' => 'advanced',
    '#open' => FALSE,
    '#access' => \Drupal::currentUser()
      ->hasPermission('administer notifications'),
  ];
  $form['node_notifications']['notifications_tokens_tree'] = get_token_tree();
  $form['notification_title']['#group'] = 'node_notifications';
  $form['notification_message']['#group'] = 'node_notifications';
  $form['generate_notification']['#group'] = 'node_notifications';
  $route_name = Drupal::routeMatch()->getRouteName();
  $langcode = Drupal::languageManager()->getCurrentLanguage()->getId();
  $default_langcode = Drupal::languageManager()->getDefaultLanguage()->getId();
  $notification_config_translation = Drupal::configFactory()
    ->getEditable('vactory_notifications.settings');
  if ($langcode !== $default_langcode) {
    $notification_config_translation = Drupal::languageManager()
      ->getLanguageConfigOverride($langcode, 'vactory_notifications.settings');
  }
  if (!isset($form['notification_title']['widget'][0]['value']['#default_value']) || $route_name === 'entity.node.content_translation_add') {
    $form['notification_title']['widget'][0]['value']['#default_value'] = $notification_config_translation->get('notifications_default_title') ?? $notifications_config->get('notifications_default_title');
  }
  if (!isset($form['notification_message']['widget'][0]['value']['#default_value']) || $route_name === 'entity.node.content_translation_add') {
    $form['notification_message']['widget'][0]['value']['#default_value'] = $notification_config_translation->get('notifications_default_message') ?? $notifications_config->get('notifications_default_message');
  }

  // Mail notification.
  $form['node_mail'] = [
    '#type' => 'details',
    '#title' => t('Mail Notifications settings'),
    '#description' => t('Override current node mail notifications subject and message.'),
    '#group' => 'advanced',
    '#open' => FALSE,
    '#access' => \Drupal::currentUser()
      ->hasPermission('administer notifications'),
  ];
  $form['node_mail']['notifications_tokens_tree'] = get_token_tree();
  $form['mail_subject']['#group'] = 'node_mail';
  $form['mail_message']['#group'] = 'node_mail';
  $form['mail_message']['widget'][0]['#format'] = 'full_html';
  if ($form_state->getFormObject()->getEntity() instanceof NodeInterface) {
    $node_type = $form_state->getFormObject()->getEntity()->getType();
    // Get the mail_content_types data.
    $mail_content_types = $notifications_config->get('mail_content_types');
    if (isset($mail_content_types[$node_type])) {
      // Check if mail_subject and mail_message are empty.
      // And set default values.
      if (empty($mail_content_types[$node_type]['mail_subject'])) {
        $node_mail_subject = $notifications_config->get('mail_default_subject') ?? $notifications_config->get('mail_default_subject');
      }
      else {
        // Use the mail_subject from mail_content_types.
        $node_mail_subject = $mail_content_types[$node_type]['mail_subject'];
      }
      if (empty($mail_content_types[$node_type]['mail_message']['value'])) {
        $node_mail_message = $notifications_config->get('mail_default_message') ?? $notifications_config->get('mail_default_message');
      }
      else {
        // Use the mail_message from mail_content_types.
        $node_mail_message = $mail_content_types[$node_type]['mail_message']['value'];
      }
    }
    $form['mail_subject']['widget'][0]['value']['#default_value'] = $node_mail_subject;
    $form['mail_message']['widget'][0]['#default_value'] = $node_mail_message;
  }
  // Check if notification are enabled for the current node bundle.
  $notification_manager = \Drupal::service('vactory_notifications.manager');
  $bundle = '';
  $node = Drupal::routeMatch()->getParameter('node');
  $content_type = Drupal::routeMatch()->getParameter('node_type');
  if ($node instanceof NodeInterface) {
    $bundle = $node->bundle();
  }
  if ($content_type instanceof NodeTypeInterface) {
    $bundle = $content_type->id();
  }
  if (!empty($bundle) && $notification_manager->isNotificationsEnabledForBundle($bundle)) {
    $form['#attached']['library'][] = 'vactory_notifications/scripts';
    $form['#attached']['library'][] = 'vactory_notifications/styles';
  }
  if (!can_send_notifications_based_user_roles($bundle)) {
    $form['node_mail']['#access'] = FALSE;
    $form['mail_subject']['#access'] = FALSE;
    $form['mail_message']['#access'] = FALSE;
    if (\Drupal::moduleHandler()->moduleExists('vactory_notifications_list_notify')) {
      $form['use_broadcast_list']['#access'] = FALSE;
      $form['broadcast_list_emails']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function vactory_notifications_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'notifications' && $view->current_display == 'listing') {
    $filters = $view->filter;
    if (isset($filters['notification_concerned_users'])) {
      $filter_value = $filters['notification_concerned_users']->value;
      $uid = $filter_value['concerned_user'] === 'current_user' ? Drupal::currentUser()
        ->id() : $filter_value['user'];
      if (!empty($uid)) {
        // Get not viewed yet notifications list.
        $query = \Drupal::entityQuery('notifications_entity')
          ->condition('notification_concerned_users', '%"' . $uid . '"%', 'LIKE')
          ->condition('notification_viewers', '%"' . $uid . '"%', 'NOT LIKE')
          ->condition('status', 1)
          ->accessCheck(TRUE);
        $notification_ids = $query->execute();
        if (!empty($notification_ids)) {
          $notifications = Drupal::entityTypeManager()
            ->getStorage('notifications_entity')
            ->loadMultiple($notification_ids);
          foreach ($notifications as $notification) {
            // Update notification viewers list.
            $notification_viewers = $notification->getViewers();
            $notification_viewers[] = $uid;
            $notification->setViewers($notification_viewers);
            $notification->save();
          }
          if (!empty($notifications)) {
            Cache::invalidateTags(['notifications_entity:view']);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vactory_notifications_preprocess_views_view_fields__notifications(&$variables) {
  $nid = $variables['row']->_entity->getRelatedContent();
  if (!empty($nid)) {
    $node = Node::load($nid);
    if ($node) {
      $variables['related_content_url'] = $node->toUrl()->toString();
    }
  }
}

/**
 * Function providing the site token tree link.
 */
function get_token_tree() {
  $token_tree = [
    '#theme' => 'token_tree_link',
    '#show_restricted' => TRUE,
    '#weight' => 90,
  ];
  return [
    '#type' => 'markup',
    '#markup' => \Drupal::service('renderer')->renderPlain($token_tree),
  ];
}

/**
 * Clear expired notifications entities batch operation.
 */
function vactory_notifications_batch_delete($ids, &$context) {
  if (!empty($ids)) {
    $notifications_storage = Drupal::entityTypeManager()
      ->getStorage('notifications_entity');
    $entities = $notifications_storage->loadMultiple($ids);
    $notifications_storage->delete($entities);
  }
}

/**
 * Implements batch finished callback.
 */
function vactory_notification_clean_finished($success, $results, $operations) {
  $console_output = new ConsoleOutput();
  if ($success) {
    $console_output->writeln('<info>Expired notifications entities has been successfully cleaned</info>');
  }
  else {
    $console_output->writeln('<error>Finished with an error.</error>');
  }
}

/**
 * Implements hook_mail().
 */
function vactory_notifications_mail($key, &$message, $params) {
  switch ($key) {
    case 'vactory_notifications_mail_body':
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      $message['options'] = $params['options'];
      break;
  }
}

/**
 * Implements hook_jsonapi_entity_filter_access().
 */
function vactory_notifications_jsonapi_entity_filter_access(EntityTypeInterface $entity_type, AccountInterface $account) {
  if ($entity_type->id() === 'notifications_entity') {
    return ([
      JSONAPI_FILTER_AMONG_ALL => AccessResult::allowedIfHasPermission($account, 'view notifications'),
    ]);
  }
}

/**
 * Implements hook_entity_access().
 */
function vactory_notifications_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity instanceof NotificationsEntity) {
    $concernedUsers = $entity->getConcernedUsers();
    if (is_array($concernedUsers) && $concernedUsers != [] && in_array($account->id(), $concernedUsers)) {
      return AccessResult::allowed();
    }
    return AccessResult::forbidden();
  }
}

/**
 * Can send notification based on user roles.
 */
function can_send_notifications_based_user_roles($bundle) {
  if (\Drupal::moduleHandler()
    ->moduleExists('vactory_notifications_role_based')) {
    return \Drupal::service('vactory_notifications_role_based.manager')
      ->canCurrentUserSendNotifications($bundle);
  }
  return TRUE;
}
